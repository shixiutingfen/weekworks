<div class="post_bd post">
<div class="content-index" id="content-index" style="float:right;"><div class="content-index-title">本文索引</div><span class="content-index-toctoggle">[<a href="javascript:content_index_toggleToc()" id="content-index-togglelink">隐藏</a>]</span>
<script language="javascript" type="text/javascript">
window.content_index_showTocToggle=true;function content_index_toggleToc(){var tts="显示";var tth="隐藏";if(window.content_index_showTocToggle){window.content_index_showTocToggle=false;document.getElementById("content-index-contents").style.display="none";document.getElementById("content-index-togglelink").innerHTML=tts}else{window.content_index_showTocToggle=true;document.getElementById("content-index-contents").style.display="block";document.getElementById("content-index-togglelink").innerHTML=tth}}
</script>
<ul id="content-index-contents"><li class="content-index-level-1"><a href="http://man.linuxde.net/inotifywait#安装inotify-tools" title="安装inotify-tools"><span>安装inotify-tools</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/inotifywait#inotify相关参数" title="inotify相关参数"><span>inotify相关参数</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/inotifywait#inotifywait命令使用" title="inotifywait命令使用"><span>inotifywait命令使用</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/inotifywait#inotifywait命令参数" title="inotifywait命令参数"><span>inotifywait命令参数</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/inotifywait#可监听的事件" title="可监听的事件"><span>可监听的事件</span></a></li></ul></li></ul></div>
<p>
<strong>Inotify</strong>一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。
</p>
<p>
<strong>inotify-tools</strong>是一个C库和一组命令行的工作提供Linux下inotify的简单接口。inotify-tools安装后会得到<code>inotifywait</code>和<code>inotifywatch</code>这两条命令：
</p>
<ul>
<li>
<strong>inotifywait命令</strong>可以用来收集有关文件访问信息，Linux发行版一般没有包括这个命令，需要安装inotify-tools，这个命令还需要将inotify支持编译入Linux内核，好在大多数Linux发行版都在内核中启用了inotify。
	</li>
<li>
<strong>inotifywatch命令</strong>用于收集关于被监视的文件系统的统计数据，包括每个 inotify 事件发生多少次。
	</li>
</ul>
<p>
	开始之前需要检测系统内核是否支持inotify：
</p>
<p>
	使用<code><span class="wp_keywordlink"><a href="http://man.linuxde.net/uname" target="_blank" title="uname命令">uname</a></span> -r</code>命令检查Linux内核，如果低于2.6.13，就需要重新编译内核加入inotify的支持。
</p>
<p>
	使用<code>ll /proc/sys/fs/inotify</code>命令，是否有以下三条信息输出，如果没有表示不支持。
</p>
<pre>
ll /proc/sys/fs/inotify
<span style="color:#808080;">total 0
-rw-r--r-- 1 root root 0 Jan  4 15:41 max_queued_events
-rw-r--r-- 1 root root 0 Jan  4 15:41 max_user_instances
-rw-r--r-- 1 root root 0 Jan  4 15:41 max_user_watches</span>
</pre>
<h3 id="安装inotify-tools">
	安装inotify-tools<br/>
</h3>
<ul>
<li>
		inotify-tools项目地址：<a href="https://github.com/rvoicilas/inotify-tools" target="_blank">https://github.com/rvoicilas/inotify-tools</a>
</li>
<li>
		inotify-tools下载地址：<a href="http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz" target="_blank">http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</a>
</li>
</ul>
<pre>
<span style="color:#808080;">#CentOS release 5.8/64位：</span>
<span class="wp_keywordlink"><a href="http://man.linuxde.net/tar" target="_blank" title="tar命令">tar</a></span> zxvf inotify-tools-3.14.tar.gz
<span class="wp_keywordlink"><a href="http://man.linuxde.net/cd" target="_blank" title="cd命令">cd</a></span> inotify-tools-3.14
./configure
<span class="wp_keywordlink"><a href="http://man.linuxde.net/make" target="_blank" title="make命令">make</a></span>
make <span class="wp_keywordlink"><a href="http://man.linuxde.net/install" target="_blank" title="install命令">install</a></span></pre>
<p>
	其他Linux发行版安装方法可以参见：<a href="https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting" target="_blank">https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting</a>
</p>
<h3 id="inotify相关参数">
	inotify相关参数<br/>
</h3>
<p>
	inotify定义了下列的接口参数，可以用来限制inotify消耗kernel memory的大小。由于这些参数都是内存参数，因此，可以根据应用需求，实时的调节其大小：
</p>
<ul>
<li>
<code>/proc/sys/fs/inotify/max_queued_evnets</code>表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。
	</li>
<li>
<code>/proc/sys/fs/inotify/max_user_instances</code>表示每一个real user <span class="wp_keywordlink"><a href="http://man.linuxde.net/id" target="_blank" title="id命令">id</a></span>可创建的inotify instatnces的数量上限。
	</li>
<li>
<code>/proc/sys/fs/inotify/max_user_watches</code>表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。
	</li>
</ul>
<p>
	根据以上在32位或者64位系统都可以执行：
</p>
<pre>
<span class="wp_keywordlink"><a href="http://man.linuxde.net/echo" target="_blank" title="echo命令">echo</a></span> 104857600 &gt; /proc/sys/fs/inotify/max_user_watches
echo 'echo 104857600 &gt; /proc/sys/fs/inotify/max_user_watches' &gt;&gt; /etc/rc.local</pre>
<p>
	如果遇到以下错误：
</p>
<pre>
<span style="color:#b22222;">inotifywait: error while loading shared libraries: libinotifytools.so.0: cannot open shared object <span class="wp_keywordlink"><a href="http://man.linuxde.net/file" target="_blank" title="file命令">file</a></span>: No such file or directory
</span></pre>
<pre>
<strong>解决方法：</strong>
32位系统：<span class="wp_keywordlink"><a href="http://man.linuxde.net/ln" target="_blank" title="ln命令">ln</a></span> -s /usr/local/lib/libinotifytools.so.0 /usr/lib/libinotifytools.so.0
64位系统：ln -s /usr/local/lib/libinotifytools.so.0 /usr/lib64/libinotifytools.so.0</pre>
<h3 id="inotifywait命令使用">
	inotifywait命令使用<br/>
</h3>
<pre>
#!/bin/bash
#filename watchdir.sh
path=$1
/usr/local/bin/inotifywait -mrq --timefmt '%d/%m/%y/%H:%M' --format '%T %<span class="wp_keywordlink"><a href="http://man.linuxde.net/w" target="_blank" title="w命令">w</a></span> %f' -e modify,delete,create,attrib $path

执行输出：
./watchdir.sh /data/wsdata/tools/
<span style="color:#808080;">04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp
04/01/13/16:35 /data/wsdata/tools/ 4913
04/01/13/16:35 /data/wsdata/tools/ 4913
04/01/13/16:35 /data/wsdata/tools/ 4913
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp
04/01/13/16:35 /data/wsdata/tools/ j.jsp~
04/01/13/16:35 /data/wsdata/tools/ .j.jsp.swp</span>
</pre>
<h3 id="inotifywait命令参数">
	inotifywait命令参数<br/>
</h3>
<ul>
<li>
<code>-m</code>是要持续监视变化。
	</li>
<li>
<code>-r</code>使用递归形式监视目录。
	</li>
<li>
<code>-q</code>减少冗余信息，只打印出需要的信息。
	</li>
<li>
<code>-e</code>指定要监视的事件列表。
	</li>
<li>
<code>--timefmt</code>是指定时间的输出格式。
	</li>
<li>
<code>--format</code>指定文件变化的详细信息。
	</li>
</ul>
<h4 id="可监听的事件">
	可监听的事件<br/>
</h4>
<table border="0" height="193" style="width: 100%;" width="74">
<tbody>
<tr>
<th>
				事件
			</th>
<th>
				描述
			</th>
</tr>
<tr>
<td>
				access
			</td>
<td>
<strong>访问</strong>，读取文件。
			</td>
</tr>
<tr>
<td>
				modify
			</td>
<td>
<strong>修改</strong>，文件内容被修改。
			</td>
</tr>
<tr>
<td>
				attrib
			</td>
<td>
<strong>属性</strong>，文件元数据被修改。
			</td>
</tr>
<tr>
<td>
				move
			</td>
<td>
<strong>移动</strong>，对文件进行移动操作。
			</td>
</tr>
<tr>
<td>
				create
			</td>
<td>
<strong>创建</strong>，生成新文件
			</td>
</tr>
<tr>
<td>
				open
			</td>
<td>
<strong>打开</strong>，对文件进行打开操作。
			</td>
</tr>
<tr>
<td>
				close
			</td>
<td>
<strong>关闭</strong>，对文件进行关闭操作。
			</td>
</tr>
<tr>
<td>
				delete
			</td>
<td>
<strong>删除</strong>，文件被删除。
			</td>
</tr>
</tbody>
</table>
</div>