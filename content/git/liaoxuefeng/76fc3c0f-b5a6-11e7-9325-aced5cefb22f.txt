<div class="x-content" style="width:100%">
<h4>分支管理策略</h4>
<div class="x-wiki-info"><span>Reads: 473797</span></div>
<hr/>
<div class="x-wiki-content x-main-content"><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p>
<p>首先，仍然创建并切换<code>dev</code>分支：</p>
<pre><code>$ git checkout -b dev
Switched to a new branch 'dev'
</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p>
<pre><code>$ git add readme.txt 
$ git commit -m "add merge"
[dev 6224937] add merge
 1 file changed, 1 insertion(+)
</code></pre><p>现在，我们切换回<code>master</code>：</p>
<pre><code>$ git checkout master
Switched to branch 'master'
</code></pre><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<pre><code>$ git merge --no-ff -m "merge with no-ff" dev
Merge made by the 'recursive' strategy.
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
</code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：</p>
<pre><code>$ git log --graph --pretty=oneline --abbrev-commit
*   7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
*   59bc1cb conflict fixed
...
</code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>
<p><img alt="git-no-ff-mode" src="/files/attachments/001384909222841acf964ec9e6a4629a35a7a30588281bb000/0"/></p>
<video controls="" height="434" width="648">
<source src="http://michaelliao.gitcafe.io/video/merge-with-no-ff.mp4"/>
<source src="http://github.liaoxuefeng.com/sinaweibopy/video/merge-with-no-ff.mp4"/>
</video>
<h3><a name="#-E5-88-86-E6-94-AF-E7-AD-96-E7-95-A5"></a>分支策略</h3>
<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img alt="git-br-policy" src="/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0"/></p>
<h3><a name="#-E5-B0-8F-E7-BB-93"></a>小结</h3>
<p>Git分支十分强大，在团队开发中应该充分应用。</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>
</div>

</div>