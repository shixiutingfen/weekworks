<div class="x-content" style="width:100%">
<h4>创建与合并分支</h4>
<div class="x-wiki-info"><span>Reads: 999238</span></div>
<hr/>
<div class="x-wiki-content x-main-content"><p>在<a href="/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000" target="_blank">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img alt="git-br-initial" src="/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0"/></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p>
<video controls="" height="300" width="400">
<source src="http://michaelliao.gitcafe.io/video/master-branch-forward.mp4"/>
<source src="http://github.liaoxuefeng.com/sinaweibopy/video/master-branch-forward.mp4"/>
</video>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img alt="git-br-create" src="/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0"/></p>
<p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img alt="git-br-dev-fd" src="/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0"/></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<p><img alt="git-br-ff-merge" src="/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0"/></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img alt="git-br-rm" src="/files/attachments/001384908867187c83ca970bf0f46efa19badad99c40235000/0"/></p>
<p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p>
<video controls="" height="300" width="400">
<source src="http://michaelliao.gitcafe.io/video/master-and-dev-ff.mp4"/>
<source src="http://github.liaoxuefeng.com/sinaweibopy/video/master-and-dev-ff.mp4"/>
</video>
<p>下面开始实战。</p>
<p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
<pre><code>$ git checkout -b dev
Switched to a new branch 'dev'
</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<pre><code>$ git branch dev
$ git checkout dev
Switched to branch 'dev'
</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p>
<pre><code>$ git branch
* dev
  master
</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p>
<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对readme.txt做个修改，加上一行：</p>
<pre><code>Creating a new branch is quick.
</code></pre><p>然后提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<pre><code>$ git checkout master
Switched to branch 'master'
</code></pre><p>切换回<code>master</code>分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img alt="git-br-on-master" src="/files/attachments/001384908892295909f96758654469cad60dc50edfa9abd000/0"/></p>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<pre><code>$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<pre><code>$ git branch -d dev
Deleted branch dev (was fec145a).
</code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<pre><code>$ git branch
* master
</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<video controls="" height="434" width="648">
<source src="http://michaelliao.gitcafe.io/video/create-dev-merge-delete.mp4"/>
<source src="http://github.liaoxuefeng.com/sinaweibopy/video/create-dev-merge-delete.mp4"/>
</video>
<h3><a name="#-E5-B0-8F-E7-BB-93"></a>小结</h3>
<p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
</div>

</div>